{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1-NoZNp7KWi-n_0rWyc37RdcpzZ7KAX30","timestamp":1758454136931}],"authorship_tag":"ABX9TyNWvB5cQrk7iJbUfOdv3PMA"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"LMoo42YiCGsa"},"outputs":[],"source":["const express = require('express');\n","const axios = require('axios');\n","const cron = require('node-cron');\n","const fs = require('fs');\n","const path = require('path');\n","const cheerio = require('cheerio');\n","\n","const SUBSCRIPTIONS_FILE = path.join(__dirname, 'esports_subscriptions.json');\n","\n","let db = { subscriptions: {}, seenMatches: {} };\n","if (fs.existsSync(SUBSCRIPTIONS_FILE)) {\n","  try { db = JSON.parse(fs.readFileSync(SUBSCRIPTIONS_FILE, 'utf8')); }\n","  catch (e) { console.error('Erro ao ler DB, iniciando vazio:', e.message); }\n","}\n","\n","function saveDB() {\n","  fs.writeFileSync(SUBSCRIPTIONS_FILE, JSON.stringify(db, null, 2));\n","}\n","\n","function normalizeTeamName(name) {\n","  return String(name || '').trim().toLowerCase();\n","}\n","\n","async function fetchHLTVMatchesHtml() {\n","  const res = await axios.get('https://www.hltv.org/matches', {\n","    headers: { 'User-Agent': 'GrooddCommunityBot/1.0 (+https://example.com)' }\n","  });\n","  return res.data;\n","}\n","\n","function extractMatchesFromHtml(html) {\n","  const $ = cheerio.load(html);\n","  const found = [];\n","\n","  // procura por links que levam a /matches/<id>/\n","  $('a[href*=\"/matches/\"]').each((i, el) => {\n","    const href = $(el).attr('href');\n","    if (!href) return;\n","    const idMatch = href.match(/\\/matches\\/(\\d+)\\//);\n","    if (!idMatch) return;\n","    const id = idMatch[1];\n","    if (found.some(m => m.id === id)) return;\n","\n","    // pega um texto de contexto próximo (pai mais próximo com texto)\n","    let context = $(el).closest('div').text() || $(el).text() || '';\n","    context = context.replace(/\\s+/g, ' ').trim();\n","\n","    // tenta extrair \"TeamA vs TeamB\" com regex\n","    let team1 = '';\n","    let team2 = '';\n","    const vsRegex = /(.+?)\\s+v(?:s|\\.?)\\s+(.+?)(?:\\s|$)/i;\n","    const dashRegex = /(.+?)\\s+[-–]\\s+(.+?)(?:\\s|$)/;\n","    let m = context.match(vsRegex) || context.match(dashRegex);\n","    if (m) {\n","      team1 = m[1].trim();\n","      team2 = m[2].trim();\n","    } else {\n","      // fallback simples: pega os dois primeiros \"blocos\" de palavras\n","      const parts = context.split(' ').slice(0, 6).join(' ');\n","      team1 = parts.slice(0, 20).trim();\n","      team2 = '';\n","    }\n","\n","    // tenta achar nome do evento se houver (heurística)\n","    let event = '';\n","    const parentText = $(el).closest('div').parent().text() || '';\n","    const evtMatch = parentText.match(/(?:Event|Tournament|Liga|League|Stage):?\\s*([^\\n\\r]+)/i);\n","    if (evtMatch) event = evtMatch[1].trim();\n","\n","    const link = 'https://www.hltv.org' + href;\n","    found.push({ id, team1, team2, event, link, raw: context });\n","  });\n","\n","  return found;\n","}\n","\n","async function getMatchesForTeam(teamName) {\n","  try {\n","    const html = await fetchHLTVMatchesHtml();\n","    const all = extractMatchesFromHtml(html);\n","    const t = normalizeTeamName(teamName);\n","    return all.filter(m =>\n","      (m.team1 && normalizeTeamName(m.team1).includes(t)) ||\n","      (m.team2 && normalizeTeamName(m.team2).includes(t))\n","    );\n","  } catch (err) {\n","    console.error('Erro ao buscar/parsear HLTV:', err.message);\n","    return [];\n","  }\n","}\n","\n","async function notifyNewMatchesForTeam(team) {\n","  const teamKey = normalizeTeamName(team);\n","  if (!db.seenMatches[teamKey]) db.seenMatches[teamKey] = [];\n","  const matches = await getMatchesForTeam(team);\n","  for (const m of matches) {\n","    if (!db.seenMatches[teamKey].includes(m.id)) {\n","      db.seenMatches[teamKey].push(m.id);\n","      saveDB();\n","      const subs = db.subscriptions[team] || [];\n","      for (const webhook of subs) {\n","        const content =\n","          `🔥 **Novo jogo de ${team}**\\n` +\n","          `**${m.team1 || '—'} vs ${m.team2 || '—'}**\\n` +\n","          `Torneio: ${m.event || '—'}\\n` +\n","          `🔗 ${m.link}`;\n","        try {\n","          await axios.post(webhook, { content });\n","          console.log('Notificado webhook:', webhook, '->', team);\n","        } catch (err) {\n","          console.error('Falha ao enviar webhook:', err.message);\n","        }\n","      }\n","    }\n","  }\n","}\n","\n","// cron: a cada 10 minutos\n","cron.schedule('*/10 * * * *', async () => {\n","  const teams = Object.keys(db.subscriptions);\n","  if (teams.length === 0) {\n","    console.log('Nenhuma inscrição encontrada — pulando polling.');\n","    return;\n","  }\n","  console.log('⏳ Polling HLTV para:', teams.join(', '));\n","  for (const t of teams) {\n","    try { await notifyNewMatchesForTeam(t); }\n","    catch (e) { console.error('Erro no notifyNewMatchesForTeam', e.message); }\n","  }\n","});\n","\n","// --- API minimal ---\n","const app = express();\n","app.use(express.json());\n","\n","app.post('/subscribe', (req, res) => {\n","  const { team, webhook } = req.body;\n","  if (!team || !webhook) return res.status(400).json({ error: \"Precisa enviar 'team' e 'webhook' no body.\" });\n","  if (!db.subscriptions[team]) db.subscriptions[team] = [];\n","  if (!db.subscriptions[team].includes(webhook)) db.subscriptions[team].push(webhook);\n","  saveDB();\n","  res.json({ ok: true, message: `Inscrito ${team}` });\n","});\n","\n","app.post('/unsubscribe', (req, res) => {\n","  const { team, webhook } = req.body;\n","  if (!team || !webhook) return res.status(400).json({ error: \"Precisa enviar 'team' e 'webhook'.\" });\n","  db.subscriptions[team] = (db.subscriptions[team] || []).filter(w => w !== webhook);\n","  saveDB();\n","  res.json({ ok: true });\n","});\n","\n","app.get('/subscriptions', (req, res) => res.json(db.subscriptions));\n","\n","app.get('/poll-now', async (req, res) => {\n","  const teams = Object.keys(db.subscriptions);\n","  for (const t of teams) await notifyNewMatchesForTeam(t);\n","  res.json({ ok: true, polled: teams.length });\n","});\n","\n","app.get('/health', (req, res) => res.json({ status: 'ok', subscriptions: Object.keys(db.subscriptions).length }));\n","\n","const PORT = process.env.PORT || 3000;\n","app.listen(PORT, () => console.log(`🚀 Bot rodando na porta ${PORT}`));"]}]}