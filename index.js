{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1Qbb4K1W2Y4nsMmpeF6UA9ddJ1_4hjN75","timestamp":1758391948382}],"authorship_tag":"ABX9TyNt+eEOiHV8tgZQh06w8Hsa"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"8DLx1vThU55k"},"outputs":[],"source":["import express from \"express\";\n","import axios from \"axios\";\n","import cron from \"node-cron\";\n","import fs from \"fs\";\n","\n","// Arquivo para salvar inscrições\n","const SUBSCRIPTIONS_FILE = \"esports_subscriptions.json\";\n","\n","// Carrega subs existentes\n","let subscriptions = {};\n","if (fs.existsSync(SUBSCRIPTIONS_FILE)) {\n","  subscriptions = JSON.parse(fs.readFileSync(SUBSCRIPTIONS_FILE, \"utf8\"));\n","}\n","\n","// Função que busca jogos no HLTV (simplificada)\n","async function getUpcomingMatches(teamName) {\n","  try {\n","    const { data } = await axios.get(\"https://www.hltv.org/matches\");\n","    const regex = new RegExp(`(${teamName})`, \"i\");\n","\n","    // Aqui seria melhor usar scraping avançado (checar <div class=\"match...\">)\n","    // Para simplificar: só verifica se o nome do time aparece na página\n","    if (regex.test(data)) {\n","      return [\n","        {\n","          teams: [teamName, \"Outro Time\"],\n","          event: \"Torneio Exemplo\",\n","          date: new Date().toLocaleString(),\n","          link: \"https://www.hltv.org/matches\"\n","        }\n","      ];\n","    }\n","    return [];\n","  } catch (err) {\n","    console.error(\"Erro ao buscar HLTV:\", err.message);\n","    return [];\n","  }\n","}\n","\n","// Função para mandar mensagem no webhook\n","async function sendDiscordMessage(webhook, match) {\n","  try {\n","    await axios.post(webhook, {\n","      content: `🔥 Novo jogo de **${match.teams[0]}**!\\n\\n` +\n","        `**${match.teams[0]} vs ${match.teams[1]}**\\n` +\n","        `🏆 Torneio: ${match.event}\\n` +\n","        `📅 Data: ${match.date}\\n` +\n","        `🔗 ${match.link}`\n","    });\n","  } catch (err) {\n","    console.error(\"Erro ao mandar mensagem pro Discord:\", err.message);\n","  }\n","}\n","\n","// Agenda para verificar a cada 10 minutos\n","cron.schedule(\"*/10 * * * *\", async () => {\n","  console.log(\"⏳ Checando jogos...\");\n","  for (const team in subscriptions) {\n","    const webhooks = subscriptions[team];\n","    const matches = await getUpcomingMatches(team);\n","\n","    for (const match of matches) {\n","      for (const webhook of webhooks) {\n","        await sendDiscordMessage(webhook, match);\n","      }\n","    }\n","  }\n","});\n","\n","// API Express para assinar times\n","const app = express();\n","app.use(express.json());\n","\n","// Rota para inscrever\n","app.post(\"/subscribe\", (req, res) => {\n","  const { team, webhook } = req.body;\n","  if (!team || !webhook) {\n","    return res.status(400).json({ error: \"Precisa de 'team' e 'webhook'\" });\n","  }\n","\n","  if (!subscriptions[team]) subscriptions[team] = [];\n","  if (!subscriptions[team].includes(webhook)) {\n","    subscriptions[team].push(webhook);\n","  }\n","\n","  fs.writeFileSync(SUBSCRIPTIONS_FILE, JSON.stringify(subscriptions, null, 2));\n","  res.json({ success: true, message: `Inscrito no time ${team}` });\n","});\n","\n","// Render exige uma porta\n","const PORT = process.env.PORT || 3000;\n","app.listen(PORT, () => {\n","  console.log(`🚀 Bot rodando na porta ${PORT}`);\n","});\n"]}]}